{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-devgiangho/src/pages/archive.tsx","webpack:///./node_modules/gatsby-theme-devgiangho/src/components/post-grid/index.tsx"],"names":["ArchivePage","data","location","posts","allPosts","edges","map","node","bigHeader","title","type","subtitle","length","query","PostGrid","post","index","frontmatter","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty","tag","tags"],"mappings":"0FAAA,qGAiCeA,UAhB0C,SAAC,GAAqB,IAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACzDC,EAAQF,EAAKG,SAASC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,QAEnD,OACE,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,IAAD,CACEN,SAAUA,EACVO,MAAK,UACLC,KAAI,WAEN,kBAAC,IAAD,CAAWD,MAAK,UAAaE,SAAaR,EAAMS,OAAX,WACrC,kBAAC,IAAD,CAAUT,MAAOA,MAOhB,IAAMU,EAAQ,c,iCCnCrB,qCA8BeC,IArBoC,SAAC,GAAD,IAAEX,EAAF,EAAEA,MAAF,OACjD,kBAAC,IAAD,KACGA,EAAMG,KAAI,SAACS,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEP,MAAOM,EAAKE,YAAYR,MACxBS,KAAMH,EAAKE,YAAYC,KACvBC,cAAeJ,EAAKE,YAAYE,cAAgBJ,EAAKE,YAAYE,cAAcC,gBAAkB,KACjGC,QAASN,EAAKE,YAAYK,QAC1BC,IAAKP,EACLQ,KACE,CACEC,KAAMV,EAAKE,YAAYS,QACvBC,WAAYZ,EAAKE,YAAYW,cAC7BC,IAAKd,EAAKE,YAAYa,KAAKlB,OAAS,EAAIG,EAAKE,YAAYa,KAAK,GAAK","file":"component---node-modules-gatsby-theme-devgiangho-src-pages-archive-tsx-3db819236aee3cfde79f.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport Layout from \"../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {Post} from \"../utils/models\";\nimport Subheader from \"../components/subheader\";\nimport SEO from \"../components/seo\";\nimport PostGrid from \"../components/post-grid\";\n\ninterface ArchivePageProps {\n  data: {\n    allPosts: {\n      edges: Array<{ node: Post }>;\n    };\n  };\n  location: Location;\n}\n\nconst ArchivePage: FunctionComponent<ArchivePageProps> = ({data, location}) => {\n  const posts = data.allPosts.edges.map(node => node.node) as Post[];\n\n  return (\n    <Layout bigHeader={false}>\n      <SEO\n        location={location}\n        title={`Archive`}\n        type={`Series`}\n      />\n      <Subheader title={`Archive`} subtitle={`${posts.length} posts`}/>\n      <PostGrid posts={posts} />\n    </Layout>\n  );\n};\n\nexport default ArchivePage;\n\nexport const query = graphql`\n  query {\n    allPosts: allMarkdownRemark(\n        filter: { fileAbsolutePath: { regex: \"/(posts)/.*\\\\\\\\.md$/\" } }\n        sort: { fields: frontmatter___created, order: DESC }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              path\n              tags\n              excerpt\n              created\n              createdPretty: created(formatString: \"DD MMMM, YYYY\")\n              featuredImage {\n                childImageSharp {\n                  sizes(maxWidth: 500, quality: 100) {\n                    base64\n                    aspectRatio\n                    src\n                    srcSet\n                    sizes\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n  }\n`;\n","import React, {FunctionComponent} from \"react\";\nimport {Post} from \"../../utils/models\";\nimport {Grid} from \"../common\";\nimport {Card} from \"../card\";\n\ninterface PostGridProps {\n  posts: Post[];\n}\n\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\n  <Grid>\n    {posts.map((post, index) => (\n      <Card\n        title={post.frontmatter.title}\n        path={post.frontmatter.path}\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\n        content={post.frontmatter.excerpt}\n        key={index}\n        meta={\n          {\n            time: post.frontmatter.created,\n            timePretty: post.frontmatter.createdPretty,\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\n          }\n        }\n      />\n    ))}\n  </Grid>\n);\n\nexport default PostGrid;\n"],"sourceRoot":""}