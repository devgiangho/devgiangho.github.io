{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-devgiangho/src/pages/archive.tsx","webpack:///./node_modules/gatsby-theme-devgiangho/src/components/post-grid/index.tsx"],"names":["ArchivePage","data","location","posts","allPosts","edges","map","node","bigHeader","title","type","subtitle","length","query","PostGrid","post","index","frontmatter","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty","tag","tags"],"mappings":"0FAAA,qGAiCeA,UAhB0C,SAAC,GAAqB,IAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACzDC,EAAQF,EAAKG,SAASC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,QAEnD,OACE,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,IAAD,CACEN,SAAUA,EACVO,MAAK,UACLC,KAAI,WAEN,kBAAC,IAAD,CAAWD,MAAK,UAAaE,SAAaR,EAAMS,OAAX,WACrC,kBAAC,IAAD,CAAUT,MAAOA,MAOhB,IAAMU,EAAQ,c,iCCnCrB,qCA8BeC,IArBoC,SAAC,GAAD,IAAEX,EAAF,EAAEA,MAAF,OACjD,kBAAC,IAAD,KACGA,EAAMG,KAAI,SAACS,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEP,MAAOM,EAAKE,YAAYR,MACxBS,KAAMH,EAAKE,YAAYC,KACvBC,cAAeJ,EAAKE,YAAYE,cAAgBJ,EAAKE,YAAYE,cAAcC,gBAAkB,KACjGC,QAASN,EAAKE,YAAYK,QAC1BC,IAAKP,EACLQ,KACE,CACEC,KAAMV,EAAKE,YAAYS,QACvBC,WAAYZ,EAAKE,YAAYW,cAC7BC,IAAKd,EAAKE,YAAYa,KAAKlB,OAAS,EAAIG,EAAKE,YAAYa,KAAK,GAAK","file":"component---node-modules-gatsby-theme-devgiangho-src-pages-archive-tsx-3db819236aee3cfde79f.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport {graphql} from \"gatsby\";\r\nimport {Post} from \"../utils/models\";\r\nimport Subheader from \"../components/subheader\";\r\nimport SEO from \"../components/seo\";\r\nimport PostGrid from \"../components/post-grid\";\r\n\r\ninterface ArchivePageProps {\r\n  data: {\r\n    allPosts: {\r\n      edges: Array<{ node: Post }>;\r\n    };\r\n  };\r\n  location: Location;\r\n}\r\n\r\nconst ArchivePage: FunctionComponent<ArchivePageProps> = ({data, location}) => {\r\n  const posts = data.allPosts.edges.map(node => node.node) as Post[];\r\n\r\n  return (\r\n    <Layout bigHeader={false}>\r\n      <SEO\r\n        location={location}\r\n        title={`Archive`}\r\n        type={`Series`}\r\n      />\r\n      <Subheader title={`Archive`} subtitle={`${posts.length} posts`}/>\r\n      <PostGrid posts={posts} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ArchivePage;\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allPosts: allMarkdownRemark(\r\n        filter: { fileAbsolutePath: { regex: \"/(posts)/.*\\\\\\\\.md$/\" } }\r\n        sort: { fields: frontmatter___created, order: DESC }\r\n      ) {\r\n        edges {\r\n          node {\r\n            id\r\n            frontmatter {\r\n              title\r\n              path\r\n              tags\r\n              excerpt\r\n              created\r\n              createdPretty: created(formatString: \"DD MMMM, YYYY\")\r\n              featuredImage {\r\n                childImageSharp {\r\n                  sizes(maxWidth: 500, quality: 100) {\r\n                    base64\r\n                    aspectRatio\r\n                    src\r\n                    srcSet\r\n                    sizes\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  }\r\n`;\r\n","import React, {FunctionComponent} from \"react\";\r\nimport {Post} from \"../../utils/models\";\r\nimport {Grid} from \"../common\";\r\nimport {Card} from \"../card\";\r\n\r\ninterface PostGridProps {\r\n  posts: Post[];\r\n}\r\n\r\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\r\n  <Grid>\r\n    {posts.map((post, index) => (\r\n      <Card\r\n        title={post.frontmatter.title}\r\n        path={post.frontmatter.path}\r\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\r\n        content={post.frontmatter.excerpt}\r\n        key={index}\r\n        meta={\r\n          {\r\n            time: post.frontmatter.created,\r\n            timePretty: post.frontmatter.createdPretty,\r\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\r\n          }\r\n        }\r\n      />\r\n    ))}\r\n  </Grid>\r\n);\r\n\r\nexport default PostGrid;\r\n"],"sourceRoot":""}