{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-dgh/src/components/card/style.tsx","webpack:///./node_modules/gatsby-theme-dgh/src/components/card/index.tsx","webpack:///./node_modules/gatsby-theme-dgh/src/components/subheader/index.tsx","webpack:///./node_modules/gatsby-theme-dgh/src/templates/tag.tsx","webpack:///./node_modules/gatsby-theme-dgh/src/components/post-grid/index.tsx"],"names":["StyledCard","styled","Link","StyledArticle","article","Theme","breakpoints","sm","FeaturedImage","Img","props","halfImage","CardContent","section","compact","CardMeta","CardTitle","h2","Card","title","meta","path","featuredImage","content","style","children","to","fixed","sizes","tag","time","dateTime","timePretty","dangerouslySetInnerHTML","__html","StyledSubheader","div","backgroundColor","textColor","SubheaderTitle","h1","SubheaderSubtitle","small","Subheader","subtitle","TagTemplate","data","location","posts","edges","map","node","length","name","frontmatter","tags","color","layout","primaryColor","icon","featured","bigHeader","type","PostGrid","post","index","childImageSharp","excerpt","key","created","createdPretty"],"mappings":"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","file":"component---node-modules-gatsby-theme-dgh-src-templates-tag-tsx-fdf476f4708f067f8c0b.js","sourcesContent":["import styled from \"styled-components\";\r\nimport {Link} from \"gatsby\";\r\nimport Theme from \"../../styles/theme\";\r\nimport Img from \"gatsby-image\";\r\nimport {CardProps} from \"./index\";\r\n\r\nexport const StyledCard = styled(Link)`\r\n  display: block;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  box-shadow: 0 1px 1px #e6e6e6, 0 2px 4px #e6e6e6;\r\n  transition: .5s all;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    transform: translate3d(0, -5px, 0);\r\n    box-shadow: 0 1px 1px #ccc, 0 4px 4px #ccc;\r\n  }\r\n`;\r\n\r\nexport const StyledArticle = styled.article`\r\n  display: inline-block;\r\n  width: 100%;\r\n\r\n  @media (max-width: ${Theme.breakpoints.sm}) {\r\n    grid-area: unset !important;\r\n  }\r\n`;\r\n\r\nexport const FeaturedImage = styled(Img)<Pick<CardProps, 'halfImage'>>`\r\n  background-position: center;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  border-top-left-radius: 3px;\r\n\r\n  ${props => props.halfImage ? `\r\n    width: 50%;\r\n    float: left;\r\n    margin-right: 30px;\r\n    height: 320px;\r\n    border-bottom-left-radius: 3px;\r\n\r\n    @media (max-width: ${Theme.breakpoints.sm}) {\r\n      width: 100%;\r\n      float: none;\r\n      height: 190px;\r\n    }\r\n  ` : `\r\n    height: 190px;\r\n    max-height: 190px;\r\n    width: 100%;\r\n    border-top-right-radius: 3px;\r\n  `};\r\n`;\r\n\r\nexport const CardContent = styled.section<{ compact: boolean }>`\r\n  padding: ${props => props.compact ? '10px' : '40px'};\r\n\r\n  p {\r\n    margin: 15px 0;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.2em;\r\n  }\r\n`;\r\n\r\nexport const CardMeta = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n  font-size: .8em;\r\n  opacity: .8;\r\n  line-height: 1em;\r\n`;\r\n\r\nexport const CardTitle = styled.h2`\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n","import React, {CSSProperties, FunctionComponent, ReactNode} from \"react\";\r\nimport {CardContent, CardMeta, CardTitle, FeaturedImage, StyledArticle, StyledCard} from \"./style\";\r\n\r\nexport interface CardProps {\r\n  title?: string;\r\n  path: string;\r\n  featuredImage?: any;\r\n  content?: string;\r\n  meta?: {\r\n    time: string;\r\n    timePretty: string;\r\n    tag: string | null;\r\n  };\r\n  halfImage?: boolean;\r\n  compact?: boolean;\r\n  style?: CSSProperties;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport const Card: FunctionComponent<CardProps> = ({\r\n                                                     title,\r\n                                                     meta,\r\n                                                     path,\r\n                                                     featuredImage,\r\n                                                     content,\r\n                                                     halfImage = false,\r\n                                                     compact = false,\r\n                                                     style,\r\n                                                     children,\r\n                                                   }) => (\r\n  <StyledArticle style={style}>\r\n    <StyledCard to={path}>\r\n      {/* TODO: Oh boy... */}\r\n      {(featuredImage && featuredImage.fixed) &&\r\n      <FeaturedImage fixed={featuredImage.fixed} halfImage={halfImage}/>\r\n      }\r\n      {(featuredImage && featuredImage.sizes) &&\r\n      <FeaturedImage sizes={featuredImage.sizes} halfImage={halfImage}/>\r\n      }\r\n      <CardContent compact={compact}>\r\n        {children}\r\n        <header>\r\n          {meta &&\r\n          <CardMeta>\r\n            {meta.tag && <>{meta.tag}</>}\r\n            {meta.time &&\r\n            <time dateTime={meta.time}>{meta.timePretty}</time>\r\n            }\r\n          </CardMeta>\r\n          }\r\n          {title &&\r\n          <CardTitle>{title}</CardTitle>\r\n          }\r\n        </header>\r\n        {content &&\r\n        <p dangerouslySetInnerHTML={{__html: content}}/>\r\n        }\r\n      </CardContent>\r\n    </StyledCard>\r\n  </StyledArticle>\r\n);\r\n","import React, {FunctionComponent} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"../common\";\r\n\r\ninterface SubheaderProps {\r\n  title: string;\r\n  subtitle?: string;\r\n  backgroundColor?: string;\r\n  textColor?: string;\r\n}\r\n\r\nconst StyledSubheader = styled.div<Pick<SubheaderProps, 'backgroundColor' | 'textColor'>>`\r\n  background-color: ${props => props.backgroundColor ? props.backgroundColor : '#000'};\r\n  color: ${props => props.textColor ? props.textColor : '#fff'};\r\n  display: flex;\r\n  align-items: center;\r\n  height: 90px;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst SubheaderTitle = styled.h1`\r\n  font-size: 1.2em;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  margin: 0;\r\n  line-height: 1em;\r\n`;\r\n\r\nconst SubheaderSubtitle = styled.small`\r\n  font-weight: normal;\r\n  display: block;\r\n  opacity: .9;\r\n`;\r\n\r\nconst Subheader: FunctionComponent<SubheaderProps> = ({title, subtitle, backgroundColor, textColor}) => (\r\n  <StyledSubheader backgroundColor={backgroundColor} textColor={textColor}>\r\n    <Container>\r\n      <SubheaderTitle>\r\n        {title}\r\n        <SubheaderSubtitle>{subtitle}</SubheaderSubtitle>\r\n      </SubheaderTitle>\r\n    </Container>\r\n  </StyledSubheader>\r\n);\r\n\r\nexport default Subheader;\r\n","import React, {FunctionComponent} from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport {graphql} from \"gatsby\";\r\nimport {Post, Tag} from \"../utils/models\";\r\nimport Subheader from \"../components/subheader\";\r\nimport SEO from \"../components/seo\";\r\nimport Theme from \"../styles/theme\";\r\nimport PostGrid from \"../components/post-grid\";\r\n\r\ninterface TagTemplateProps {\r\n  data: {\r\n    tag: Tag;\r\n    posts: {\r\n      edges: Array<{ node: Post }>;\r\n    }\r\n  };\r\n  location: Location;\r\n}\r\n\r\nconst TagTemplate: FunctionComponent<TagTemplateProps> = ({data, location}) => {\r\n  let tag     = data.tag;\r\n  const posts = data.posts.edges.map(node => node.node);\r\n\r\n  if (! tag && posts.length > 0) {\r\n    tag = {\r\n      name: posts[0].frontmatter.tags[0],\r\n      color: Theme.layout.primaryColor,\r\n      icon: null,\r\n      featured: false,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <Layout bigHeader={false}>\r\n      <SEO\r\n        title={tag.name}\r\n        location={location}\r\n        type={`Series`}\r\n      />\r\n      <Subheader title={tag.name} subtitle={`${posts.length} posts`} backgroundColor={tag.color}/>\r\n      <PostGrid posts={posts} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TagTemplate;\r\n\r\nexport const query = graphql`\r\n  query($tag: String!) {\r\n    tag: tags(name: { eq: $tag }) {\r\n      name\r\n      color\r\n    }\r\n    posts: allMarkdownRemark(\r\n      filter: {\r\n        fileAbsolutePath: {regex: \"/(posts)/.*\\\\\\\\.md$/\"},\r\n        frontmatter: {tags: {eq: $tag}}\r\n      },\r\n      sort: {fields: frontmatter___created, order: DESC}\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            path\r\n            tags\r\n            excerpt\r\n            created\r\n            createdPretty: created(formatString: \"DD MMMM, YYYY\")\r\n            featuredImage {\r\n              childImageSharp {\r\n                sizes(maxWidth: 800, quality: 100) {\r\n                  base64\r\n                  aspectRatio\r\n                  src\r\n                  srcSet\r\n                  sizes\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, {FunctionComponent} from \"react\";\r\nimport {Post} from \"../../utils/models\";\r\nimport {Grid} from \"../common\";\r\nimport {Card} from \"../card\";\r\n\r\ninterface PostGridProps {\r\n  posts: Post[];\r\n}\r\n\r\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\r\n  <Grid>\r\n    {posts.map((post, index) => (\r\n      <Card\r\n        title={post.frontmatter.title}\r\n        path={post.frontmatter.path}\r\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\r\n        content={post.frontmatter.excerpt}\r\n        key={index}\r\n        meta={\r\n          {\r\n            time: post.frontmatter.created,\r\n            timePretty: post.frontmatter.createdPretty,\r\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\r\n          }\r\n        }\r\n      />\r\n    ))}\r\n  </Grid>\r\n);\r\n\r\nexport default PostGrid;\r\n"],"sourceRoot":""}