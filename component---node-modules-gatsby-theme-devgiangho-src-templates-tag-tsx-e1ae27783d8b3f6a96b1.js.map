{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-devgiangho/src/templates/tag.tsx","webpack:///./node_modules/gatsby-theme-devgiangho/src/components/post-grid/index.tsx"],"names":["TagTemplate","data","location","tag","posts","edges","map","node","length","name","frontmatter","tags","color","Theme","layout","primaryColor","icon","featured","bigHeader","title","type","subtitle","backgroundColor","query","PostGrid","post","index","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty"],"mappings":"4MA6CeA,UA1B0C,SAAC,GAAqB,IAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC3DC,EAAUF,EAAKE,IACbC,EAAQH,EAAKG,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,QAWhD,OATMJ,GAAOC,EAAMI,OAAS,IAC1BL,EAAM,CACJM,KAAML,EAAM,GAAGM,YAAYC,KAAK,GAChCC,MAAOC,IAAMC,OAAOC,aACpBC,KAAM,KACNC,UAAU,IAKZ,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,IAAD,CACEC,MAAOhB,EAAIM,KACXP,SAAUA,EACVkB,KAAI,WAEN,kBAAC,IAAD,CAAWD,MAAOhB,EAAIM,KAAMY,SAAajB,EAAMI,OAAX,SAA2Bc,gBAAiBnB,EAAIS,QACpF,kBAAC,IAAD,CAAUR,MAAOA,MAOhB,IAAMmB,EAAQ,c,iCC/CrB,qCA8BeC,IArBoC,SAAC,GAAD,IAAEpB,EAAF,EAAEA,MAAF,OACjD,kBAAC,IAAD,KACGA,EAAME,KAAI,SAACmB,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEP,MAAOM,EAAKf,YAAYS,MACxBQ,KAAMF,EAAKf,YAAYiB,KACvBC,cAAeH,EAAKf,YAAYkB,cAAgBH,EAAKf,YAAYkB,cAAcC,gBAAkB,KACjGC,QAASL,EAAKf,YAAYqB,QAC1BC,IAAKN,EACLO,KACE,CACEC,KAAMT,EAAKf,YAAYyB,QACvBC,WAAYX,EAAKf,YAAY2B,cAC7BlC,IAAKsB,EAAKf,YAAYC,KAAKH,OAAS,EAAIiB,EAAKf,YAAYC,KAAK,GAAK","file":"component---node-modules-gatsby-theme-devgiangho-src-templates-tag-tsx-e1ae27783d8b3f6a96b1.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport {graphql} from \"gatsby\";\r\nimport {Post, Tag} from \"../utils/models\";\r\nimport Subheader from \"../components/subheader\";\r\nimport SEO from \"../components/seo\";\r\nimport Theme from \"../styles/theme\";\r\nimport PostGrid from \"../components/post-grid\";\r\n\r\ninterface TagTemplateProps {\r\n  data: {\r\n    tag: Tag;\r\n    posts: {\r\n      edges: Array<{ node: Post }>;\r\n    }\r\n  };\r\n  location: Location;\r\n}\r\n\r\nconst TagTemplate: FunctionComponent<TagTemplateProps> = ({data, location}) => {\r\n  let tag     = data.tag;\r\n  const posts = data.posts.edges.map(node => node.node);\r\n\r\n  if (! tag && posts.length > 0) {\r\n    tag = {\r\n      name: posts[0].frontmatter.tags[0],\r\n      color: Theme.layout.primaryColor,\r\n      icon: null,\r\n      featured: false,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <Layout bigHeader={false}>\r\n      <SEO\r\n        title={tag.name}\r\n        location={location}\r\n        type={`Series`}\r\n      />\r\n      <Subheader title={tag.name} subtitle={`${posts.length} posts`} backgroundColor={tag.color}/>\r\n      <PostGrid posts={posts} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TagTemplate;\r\n\r\nexport const query = graphql`\r\n  query($tag: String!) {\r\n    tag: tags(name: { eq: $tag }) {\r\n      name\r\n      color\r\n    }\r\n    posts: allMarkdownRemark(\r\n      filter: {\r\n        fileAbsolutePath: {regex: \"/(posts)/.*\\\\\\\\.md$/\"},\r\n        frontmatter: {tags: {eq: $tag}}\r\n      },\r\n      sort: {fields: frontmatter___created, order: DESC}\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            path\r\n            tags\r\n            excerpt\r\n            created\r\n            createdPretty: created(formatString: \"DD MMMM, YYYY\")\r\n            featuredImage {\r\n              childImageSharp {\r\n                sizes(maxWidth: 800, quality: 100) {\r\n                  base64\r\n                  aspectRatio\r\n                  src\r\n                  srcSet\r\n                  sizes\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, {FunctionComponent} from \"react\";\r\nimport {Post} from \"../../utils/models\";\r\nimport {Grid} from \"../common\";\r\nimport {Card} from \"../card\";\r\n\r\ninterface PostGridProps {\r\n  posts: Post[];\r\n}\r\n\r\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\r\n  <Grid>\r\n    {posts.map((post, index) => (\r\n      <Card\r\n        title={post.frontmatter.title}\r\n        path={post.frontmatter.path}\r\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\r\n        content={post.frontmatter.excerpt}\r\n        key={index}\r\n        meta={\r\n          {\r\n            time: post.frontmatter.created,\r\n            timePretty: post.frontmatter.createdPretty,\r\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\r\n          }\r\n        }\r\n      />\r\n    ))}\r\n  </Grid>\r\n);\r\n\r\nexport default PostGrid;\r\n"],"sourceRoot":""}