{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-devgiangho/src/templates/tag.tsx","webpack:///./node_modules/gatsby-theme-devgiangho/src/components/post-grid/index.tsx"],"names":["TagTemplate","data","location","tag","posts","edges","map","node","length","name","frontmatter","tags","color","Theme","layout","primaryColor","icon","featured","bigHeader","title","type","subtitle","backgroundColor","query","PostGrid","post","index","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty"],"mappings":"4MA6CeA,UA1B0C,SAAC,GAAqB,IAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC3DC,EAAUF,EAAKE,IACbC,EAAQH,EAAKG,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKA,QAWhD,OATMJ,GAAOC,EAAMI,OAAS,IAC1BL,EAAM,CACJM,KAAML,EAAM,GAAGM,YAAYC,KAAK,GAChCC,MAAOC,IAAMC,OAAOC,aACpBC,KAAM,KACNC,UAAU,IAKZ,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,IAAD,CACEC,MAAOhB,EAAIM,KACXP,SAAUA,EACVkB,KAAI,WAEN,kBAAC,IAAD,CAAWD,MAAOhB,EAAIM,KAAMY,SAAajB,EAAMI,OAAX,SAA2Bc,gBAAiBnB,EAAIS,QACpF,kBAAC,IAAD,CAAUR,MAAOA,MAOhB,IAAMmB,EAAQ,c,iCC/CrB,qCA8BeC,IArBoC,SAAC,GAAD,IAAEpB,EAAF,EAAEA,MAAF,OACjD,kBAAC,IAAD,KACGA,EAAME,KAAI,SAACmB,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEP,MAAOM,EAAKf,YAAYS,MACxBQ,KAAMF,EAAKf,YAAYiB,KACvBC,cAAeH,EAAKf,YAAYkB,cAAgBH,EAAKf,YAAYkB,cAAcC,gBAAkB,KACjGC,QAASL,EAAKf,YAAYqB,QAC1BC,IAAKN,EACLO,KACE,CACEC,KAAMT,EAAKf,YAAYyB,QACvBC,WAAYX,EAAKf,YAAY2B,cAC7BlC,IAAKsB,EAAKf,YAAYC,KAAKH,OAAS,EAAIiB,EAAKf,YAAYC,KAAK,GAAK","file":"component---node-modules-gatsby-theme-devgiangho-src-templates-tag-tsx-e1ae27783d8b3f6a96b1.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport Layout from \"../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {Post, Tag} from \"../utils/models\";\nimport Subheader from \"../components/subheader\";\nimport SEO from \"../components/seo\";\nimport Theme from \"../styles/theme\";\nimport PostGrid from \"../components/post-grid\";\n\ninterface TagTemplateProps {\n  data: {\n    tag: Tag;\n    posts: {\n      edges: Array<{ node: Post }>;\n    }\n  };\n  location: Location;\n}\n\nconst TagTemplate: FunctionComponent<TagTemplateProps> = ({data, location}) => {\n  let tag     = data.tag;\n  const posts = data.posts.edges.map(node => node.node);\n\n  if (! tag && posts.length > 0) {\n    tag = {\n      name: posts[0].frontmatter.tags[0],\n      color: Theme.layout.primaryColor,\n      icon: null,\n      featured: false,\n    };\n  }\n\n  return (\n    <Layout bigHeader={false}>\n      <SEO\n        title={tag.name}\n        location={location}\n        type={`Series`}\n      />\n      <Subheader title={tag.name} subtitle={`${posts.length} posts`} backgroundColor={tag.color}/>\n      <PostGrid posts={posts} />\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const query = graphql`\n  query($tag: String!) {\n    tag: tags(name: { eq: $tag }) {\n      name\n      color\n    }\n    posts: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/(posts)/.*\\\\\\\\.md$/\"},\n        frontmatter: {tags: {eq: $tag}}\n      },\n      sort: {fields: frontmatter___created, order: DESC}\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            path\n            tags\n            excerpt\n            created\n            createdPretty: created(formatString: \"DD MMMM, YYYY\")\n            featuredImage {\n              childImageSharp {\n                sizes(maxWidth: 800, quality: 100) {\n                  base64\n                  aspectRatio\n                  src\n                  srcSet\n                  sizes\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, {FunctionComponent} from \"react\";\nimport {Post} from \"../../utils/models\";\nimport {Grid} from \"../common\";\nimport {Card} from \"../card\";\n\ninterface PostGridProps {\n  posts: Post[];\n}\n\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\n  <Grid>\n    {posts.map((post, index) => (\n      <Card\n        title={post.frontmatter.title}\n        path={post.frontmatter.path}\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\n        content={post.frontmatter.excerpt}\n        key={index}\n        meta={\n          {\n            time: post.frontmatter.created,\n            timePretty: post.frontmatter.createdPretty,\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\n          }\n        }\n      />\n    ))}\n  </Grid>\n);\n\nexport default PostGrid;\n"],"sourceRoot":""}